version: '3.8'

services:
  manager:
    build:
      context: ./manager
    ports:
      - "8080:8080"
    environment:
      - WORKER_URLS=http://worker1:8081,http://worker2:8081,http://worker3:8081
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672/
      - MONGO_URI=mongodb://mongo1:27017,mongo2:27017,mongo3:27017/?replicaSet=rs0
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongo-init:
        condition: service_completed_successfully
    networks:
      - crackhash-net

  worker1:
    build:
      context: ./worker
    environment:
      - MANAGER_URL=http://manager:8080
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672/
    networks:
      - crackhash-net
    depends_on:
      manager:
        condition: service_started
      rabbitmq:
        condition: service_healthy


  worker2:
    build:
      context: ./worker
    environment:
      - MANAGER_URL=http://manager:8080
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672/
    networks:
      - crackhash-net
    depends_on:
      manager:
        condition: service_started
      rabbitmq:
        condition: service_healthy

  worker3:
    build:
      context: ./worker
    environment:
      - MANAGER_URL=http://manager:8080
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672/
    networks:
      - crackhash-net
    depends_on:
      manager:
        condition: service_started
      rabbitmq:
        condition: service_healthy

  rabbitmq:
    image: rabbitmq:3-management
    hostname: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 40s
    networks:
      - crackhash-net

  mongo1:
    image: mongo
    command: ["mongod", "--replSet", "rs0"]
    ports:
      - "27018:27017"
    networks:
      - crackhash-net

  mongo2:
    image: mongo
    command: ["mongod", "--replSet", "rs0"]
    ports:
      - "27019:27017"
    networks:
      - crackhash-net

  mongo3:
    image: mongo
    command: ["mongod", "--replSet", "rs0"]
    ports:
      - "27020:27017"
    networks:
      - crackhash-net

  mongo-init:
    image: mongo:latest
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    command: >
      bash -c "
        echo 'Waiting for MongoDB nodes...' &&
        sleep 10 &&
        echo 'Checking replica set status...' &&
        mongosh --host mongo1:27017 --quiet --eval \"
          try {
            rs_status = rs.status();
            print('Replica set already initialized. Status:');
            printjson(rs_status.ok);
          } catch (e) {
            print('Replica set not initialized, attempting initiation...');
            rs.initiate({ _id: 'rs0', members: [ { _id: 0, host: 'mongo1:27017' }, { _id: 1, host: 'mongo2:27017' }, { _id: 2, host: 'mongo3:27017' } ]});
            print('Replica set initiation command sent.');
          }
        \"
      "
    networks:
    - crackhash-net

volumes:
  rabbitmq_data:
  mongo1_data:
  mongo2_data:
  mongo3_data:

networks:
  crackhash-net:
    driver: bridge